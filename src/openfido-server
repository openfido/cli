#!/bin/bash

PIDFILE="/tmp/openfido.pid"
LOGFILE="/var/log/openfido.log"
touch $LOGFILE 1>/dev/null 2>&1|| LOGFILE="openfido.log"

HOSTNAME="127.0.0.1"
IMAGENAME=${IMAGENAME:-openfido/cli:latest}
BACKUPIMAGENAME=${BACKUPIMAGENAME:-openfido-backup-latest}
FORCERESTORE=${FORCERESTORE:-false}
PORTNUM="3000"
OPTIONS=""

if [ -f "$0.conf" ]; then
	. "$0.conf"
fi

function error()
{
	RC=$1
	shift 1
	echo "ERROR [openfido-server]: $*"
	if [ $RC != "NONE" ]; then
		exit $RC
	fi
}

function warning()
{
	echo "WARNING [openfido-server]: $*"
}

# check for commands that absolutely necessary to proceed
function require()
{
	$1 ${2:---version} > /dev/null 2>&1 || error 1 "$1 is required"
}

function update ()
{
	echo -n "Updating ${IMAGENAME}..."
	docker pull ${IMAGENAME} 1>/dev/null 2>/dev/null
	echo "ok"
}

function status ()
{
	# OK - server is ready
	# NOREPLY - server did not reply but should have
	# INVALID - server replied but shouldn't have
	# STOPPED - no server active
	# <http-status-code> - server replied with unexpected code
	PID=$(docker container ls -q -f name=openfido-server-1)
	REPLY=$(curl -sLI "$HOSTNAME:$PORTNUM" | head -n 1 | cut -f2 -d' ') 
	if [ -z "$PID" ]; then # no server
		if [ -z "$REPLY"]; then # no reply
			echo "STOPPED"
		else
			echo "INVALID"
		fi
	else
		if [ -z "$REPLY" ]; then
			echo "NOREPLY"
		elif [ "$REPLY" == "200" ]; then
			echo "OK"
		else
			echo "$REPLY"
		fi
	fi
}

function start ()
{
	echo "*********************"
	echo "OPTIONS: $OPTIONS, "
	echo "HOSTNAME: $HOSTNAME," 
	echo "PORTNUM:$ $PORTNUM," 
	echo "IMAGENAME:$IMAGENAME,"  
	echo "LOGFILE:$LOGFILE"
	echo "*********************"

	if [ "$(status)" == "STOPPED" ]; then
		echo -n "Starting openfido server (please wait)"
		docker rm openfido-server-1 1>/dev/null 2>/dev/null || true
		docker run --name openfido-server-1 $OPTIONS -v /tmp:/tmp -v /var/run/docker.sock:/var/run/docker.sock -p $HOSTNAME:5001:5001 -p $HOSTNAME:5002:5002 -p $HOSTNAME:5003:5003 -p $HOSTNAME:9000:9000 -p $HOSTNAME:3000:$PORTNUM ${IMAGENAME} 1>>$LOGFILE 2>&1 &
		while [ "$(status)" == "STOPPED" ]; do
			sleep 1
		done
		while [ "$(status)" == "NOREPLY" ]; do
			echo -n "."
			sleep 1
		done
		if [ "$(status)" != "OK" ]; then
			echo "startup failed (status=$(status)), killing server"
			PID=$(docker container ls -q -f name=openfido-server-1)
			docker container kill $PID > /dev/null
		fi
		echo "ok"
	else
		error 1 "unabled to start, server status is $(status)"
	fi
}

function stop ()
{
	PID=$(docker container ls -q -f name=openfido-server-1)
	if [ -z "$PID" ]; then
		warning "no server active"
	else
		echo -n "Stopping openfido server..."
		docker container kill $PID > /dev/null
		docker container rm $PID > /dev/null
		echo "ok"
	fi
}

function backup()
{
	# check if openfido/cli image is active. 
	PID=$(docker container ls -q -f name=openfido-server-1)
	if [ -z "$PID" ]; then
		error 1 "no server active, please run the server then run the backup command"
	fi

	# manually update the container id variable if you did not name the container
	# use the below command to see your container list. It should be the container running openfido/cli
	# docker ps -a
	# this script makes the directory if it doesn't exist, and if it does, handles naming new and renaming old db dumps
	container_id=$(docker container ls -q -f name=openfido)
	DIR=~/cli_restore_db
	DTS=`date +%d-%m-%Y"_"%H_%M_%S`
	if test ! -d "$DIR"; then
		echo 'no restore directory found, creating directory'
		cd ~
		mkdir -p cli_restore_db
		cd cli_restore_db
		docker exec -t $container_id pg_dumpall -c -U postgres > dump_cli_$DTS.sql
		ln -sf dump_cli_$DTS.sql dump_cli.sql
		echo 'backup created.'
	fi

	if test -d "$DIR"; then
		cd $DIR
		if test ! -e "$DIR/dump_cli.sql"; then
			echo 'directory found, no backup detected. creating backup.'
			docker exec -t $container_id pg_dumpall -c -U postgres > dump_cli_$DTS.sql
			ln -sf dump_cli_$DTS.sql dump_cli.sql
			echo 'backup created.'
		fi

		if test -e "$DIR/dump_cli.sql"; then
			docker exec -t $container_id pg_dumpall -c -U postgres > dump_cli_$DTS.sql
			ln -sf dump_cli_$DTS.sql dump_cli.sql
			echo 'backup created.'
		fi
	fi

}

function restore()
{	
	# check if openfido/cli image is active. 
	PID=$(docker container ls -q -f name=openfido-server-1)
	if [ -z "$PID" ]; then
		error 1 "no server active, please run the server then run the backup command"
	fi

	container_id=$(docker container ls -q -f name=openfido)
	DIR=~/cli_restore_db
	# check if a backup exists 
	if test ! -e "$DIR/dump_cli.sql"; then 
		error 1 "dump_cli.sql: the backup file does not exist "
	fi

	# you will use the created backup file here to restore the db
	# this script needs to be run right after you finish starting a fresh instance of openfido/cli and before accessing it
	# here you need -i and the database name. Unlike -t, which uses the container id on the left, 
	# -i uses the name under the NAMES column on the right.
	if test -e "$DIR/dump_cli.sql"; then
		echo 'backup located, beginning database restore.'
		USER=postgres 
		container_name=openfido-server-1
		docker exec -i $container_name psql --username $USER < $DIR/dump_cli.sql 

		# allow variables to be passed in from the container
		container_id=$(docker container ls -q -f name=openfido)
		container_name=openfido-server-1
		docker exec -i $container_name bash -c '
			cd opt/app-keys ;
			PIPE_CLIENT=`sed "'"s/ //g"'" pipelines-client` ; 
			PIPE_CLIENT=`echo $PIPE_CLIENT | sed "'"s/exportWORKFLOW_API_TOKEN=//"'"` ; 
			echo $PIPE_CLIENT ; 
			PIPE_WORKER=`sed "'"s/ //g"'" worker-client` ; 
			PIPE_WORKER=`echo $PIPE_WORKER | sed "'"s/exportWORKER_API_TOKEN=//"'"` ; 
			echo $PIPE_WORKER ; 
			REACT=`sed "'"s/ //g"'" react-client` ; 
			REACT=`echo $REACT | sed "'"s/exportconstAPI_TOKEN=//"'"` ;
			REACT=`echo $REACT | sed '\''s/"//g'\''` ; 
			echo $REACT ;
			psql -U postgres -d workflowservice -c "UPDATE application SET api_key='\''$PIPE_WORKER'\'' WHERE id=1"
			psql -U postgres -d workflowservice -c "UPDATE application SET api_key='\''$PIPE_CLIENT'\'' WHERE id=2"
			psql -U postgres -d appservice -c "UPDATE application SET api_key='\''$REACT'\'' WHERE id=1"
			'
		echo 'database restore completed.'
		echo 'If there were issues with the restore, stop and then start the openfido server before running restore.'
		echo 'Restore will not be able to run correctly when a user is actively connected to the database, as the database cannot be updated while in use.'
	fi

}

function stop ()
{
	PID=$(docker container ls -q -f name=openfido-server-1)
	if [ -z "$PID" ]; then
		warning "no server active"
	else
		echo -n "Stopping openfido server..."
		docker container kill $PID > /dev/null
		docker container rm $PID > /dev/null
		echo "ok"
	fi

}

function _open()
{
	echo "Connecting your browser to http://$HOSTNAME:$PORTNUM/"
	echo "The default login is admin@example.com, password 1234567890"
	open http://$HOSTNAME:$PORTNUM/	
}



if [ "$1" == "--imagename" ]; then
	IMAGENAME=$2
	# check if docker image is not default name:openfido/cli:latest , then check if docker image exists locally. 
	if [ $IMAGENAME != "openfido/cli:latest" ]; then 
		[ -n "$(docker images -q $IMAGENAME)" ] || error 1 "docker image:$IMAGENAME does not exist"
	fi
	shift 2
fi

if [ "$1" == "--backupname" ]; then
	BACKUPIMAGENAME=$2
	echo "BACKUPIMAGENAME=$BACKUPIMAGENAME"
	shift 2
fi

if [ "$1" == "update" ]; then
	update
elif [ "$1" == "start" ]; then
	start
elif [ "$1" == "stop" ]; then
	stop
elif [ "$1" == "restart" ]; then
	stop
	start
elif [ "$1" == "open" ]; then
	_open
elif [ "$1" == "backup" ]; then
	backup
	shift 1
elif [ "$1" == "restore" ]; then
	if [ "$2" == "--force" ]; then 
		FORCERESTORE="true"
	fi
	restore 
	shift 2
elif [ "$1" == "status" ]; then
	STATUS=$(status)
	case ${STATUS:-UNKNOWN} in
	OK) echo "Server is up" ;;
	STOPPED) echo "Openfido server is down";;
	NOREPLY) echo "Openfido server is starting up";;
	INVALID) echo "Openfido server is invalid";;
	UNKNOWN) echo "Openfido server status is unknown";;
	*) echo "Openfido server reply code $STATUS";;
	esac
else
	error 1 "'$1' is not a valid command"
fi

