#!/bin/bash

PIDFILE="/tmp/openfido.pid"
LOGFILE="/var/log/openfido.log"
touch $LOGFILE 1>/dev/null 2>&1|| LOGFILE="openfido.log"

HOSTNAME="127.0.0.1"
IMAGENAME=${IMAGENAME:-openfido/cli:latest}
BACKUPIMAGENAME=${BACKUPIMAGENAME:-openfido-backup-latest}
FORCERESTORE=${FORCERESTORE:-false}
PORTNUM="3000"
OPTIONS=""

if [ -f "$0.conf" ]; then
	. "$0.conf"
fi

function error()
{
	RC=$1
	shift 1
	echo "ERROR [openfido-server]: $*"
	if [ $RC != "NONE" ]; then
		exit $RC
	fi
}

function warning()
{
	echo "WARNING [openfido-server]: $*"
}

# check for commands that absolutely necessary to proceed
function require()
{
	$1 ${2:---version} > /dev/null 2>&1 || error 1 "$1 is required"
}

function update ()
{
	echo -n "Checking for updates..."
	docker pull ${IMAGENAME} 1>/dev/null 2>/dev/null
	echo "ok"
}

function status ()
{
	# OK - server is ready
	# NOREPLY - server did not reply but should have
	# INVALID - server replied but shouldn't have
	# STOPPED - no server active
	# <http-status-code> - server replied with unexpected code
	PID=$(docker container ls -q -f name=openfido-server-1)
	REPLY=$(curl -sLI "$HOSTNAME:$PORTNUM" | head -n 1 | cut -f2 -d' ') 
	if [ -z "$PID" ]; then # no server
		if [ -z "$REPLY"]; then # no reply
			echo "STOPPED"
		else
			echo "INVALID"
		fi
	else
		if [ -z "$REPLY" ]; then
			echo "NOREPLY"
		elif [ "$REPLY" == "200" ]; then
			echo "OK"
		else
			echo "$REPLY"
		fi
	fi
}

function start ()
{
	echo "*********************"
	echo "OPTIONS: $OPTIONS, "
	echo "HOSTNAME: $HOSTNAME," 
	echo "PORTNUM:$ $PORTNUM," 
	echo "IMAGENAME:$IMAGENAME,"  
	echo "LOGFILE:$LOGFILE"
	echo "*********************"

	if [ "$(status)" == "STOPPED" ]; then
		echo -n "Starting openfido server"
		docker rm openfido-server-1 1>/dev/null 2>/dev/null || true
		docker run --name openfido-server-1 $OPTIONS -v /tmp:/tmp -v /var/run/docker.sock:/var/run/docker.sock -p $HOSTNAME:5001:5001 -p $HOSTNAME:5002:5002 -p $HOSTNAME:5003:5003 -p $HOSTNAME:9000:9000 -p $HOSTNAME:3000:$PORTNUM ${IMAGENAME} 1>>$LOGFILE 2>&1 &
		while [ "$(status)" == "STOPPED" ]; do
			sleep 1
		done
		while [ "$(status)" == "NOREPLY" ]; do
			echo -n "."
			sleep 1
		done
		if [ "$(status)" != "OK" ]; then
			echo "startup failed (status=$(status)), killing server"
			PID=$(docker container ls -q -f name=openfido-server-1)
			docker container kill $PID > /dev/null
		fi
		echo "ok"
	else
		error 1 "unabled to start, server status is $(status)"
	fi
}

function stop ()
{
	PID=$(docker container ls -q -f name=openfido-server-1)
	if [ -z "$PID" ]; then
		warning "no server active"
	else
		echo -n "Stopping openfido server..."
		docker container kill $PID > /dev/null
		docker container rm $PID > /dev/null
		echo "ok"
	fi
}

function backup()
{
	# checkk if openfido/cli image is activate. 
	require pv
	PID=$(docker container ls -q -f name=openfido-server-1)
	if [ -z "$PID" ]; then
		error 1 "no server active, please activate server then run the backup command"
	fi

	currentTime=$(date '+%Y%m%d-%H%M%S')
	docker save openfido/cli:latest | pv -s $(docker image inspect openfido/cli:latest --format='{{.Size}}') > ./backup/$BACKUPIMAGENAME.tar
	# commit current image -> 
	# ****************************************************************************************************
	# To do the commit feature require to export .env file first to save credentials. 
	# To get original credentials in loading image, please import the .env file run openfido server --imagename [NAME] start
	# ****************************************************************************************************
	# check previous commited image exits
	# if [ ! -z "$(docker images -q  openfido-backup-"*")" ]; then 
	# 	# remove previous commit image
	# 	echo "remove previous commited image"
	# 	for image_id in $(docker images -q  openfido-backup-"*")
	# 	do
	# 		docker rmi $image_id
	# 	done
		
	# fi
	# echo "commit docker image:openfido-backup-$currentTime:backup"
	# docker commit openfido-server-1 openfido-backup-$currentTime:backup | pv 
	# # save image to .tar
	# echo "save docker image:openfido-backup-$currentTime:backup to $BACKUPIMAGENAME.tar"
	# if [ ! -d backup ]; then 
	# 	mkdir backup
	# 	chmod +rw backup
	# fi
	# docker save openfido-backup-$currentTime:backup | pv -s $(docker image inspect openfido-backup-$currentTime:backup --format='{{.Size}}') > ./backup/$BACKUPIMAGENAME.tar

}

function restore()
{	
	require pv
	# check if backup image exist 
	if [ ! -f ./backup/$BACKUPIMAGENAME.tar ]; then 
		error 1 "$BACKUPIMAGENAME.tar: no such file "
	fi
	# check if server not active and --force is not true 
	PID=$(docker container ls -q -f name=openfido-server-1)
	if [ ! -z "$PID" ]; then
		# if server is active 
		if [ $FORCERESTORE == "true" ]; then 
			# stop server
			echo "force to stop server"
			stop
		else
			error 1 "openfido-server-1 is activated, please stop server or use [--force] options to force restore!!!"
		fi
	fi

	# load image
	echo "load back up docker image: $BACKUPIMAGENAME.tar "
	response=$(pv ./backup/$BACKUPIMAGENAME.tar | docker load)
	IMAGENAME=${response##*Loaded image: } # get the string after "Loaded image: "

	echo "load back up to docker-image:$BACKUPIMAGENAME"
	echo "run backup image:$BACKUPIMAGENAME"
	start
}

function stop ()
{
	PID=$(docker container ls -q -f name=openfido-server-1)
	if [ -z "$PID" ]; then
		warning "no server active"
	else
		echo -n "Stopping openfido server..."
		docker container kill $PID > /dev/null
		docker container rm $PID > /dev/null
		echo "ok"
	fi

}

function _open()
{
	echo "Connecting your browser to http://$HOSTNAME:$PORTNUM/"
	echo "The default login is admin@example.com, password 1234567890"
	open http://$HOSTNAME:$PORTNUM/	
}



if [ "$1" == "--imagename" ]; then
	IMAGENAME=$2
	# check if docker image is not default name:openfido/cli:latest , then check if docker image exists locally. 
	if [ $IMAGENAME != "openfido/cli:latest" ]; then 
		[ -n "$(docker images -q $IMAGENAME)" ] || error 1 "docker image:$IMAGENAME does not exist"
	fi
	shift 2
fi

if [ "$1" == "--backupname" ]; then
	BACKUPIMAGENAME=$2
	echo "BACKUPIMAGENAME=$BACKUPIMAGENAME"
	shift 2
fi

if [ "$1" == "update" ]; then
	update
elif [ "$1" == "start" ]; then
	start
elif [ "$1" == "stop" ]; then
	stop
elif [ "$1" == "restart" ]; then
	stop
	start
elif [ "$1" == "open" ]; then
	_open
elif [ "$1" == "backup" ]; then
	backup
	shift 1
elif [ "$1" == "restore" ]; then
	if [ "$2" == "--force" ]; then 
		FORCERESTORE="true"
	fi
	restore 
	shift 2
elif [ "$1" == "status" ]; then
	STATUS=$(status)
	case ${STATUS:-UNKNOWN} in
	OK) echo "Server is up" ;;
	STOPPED) echo "Openfido server is down";;
	NOREPLY) echo "Openfido server is starting up";;
	INVALID) echo "Openfido server is invalid";;
	UNKNOWN) echo "Openfido server status is unknown";;
	*) echo "Openfido server reply code $STATUS";;
	esac
else
	error 1 "'$1' is not a valid command"
fi

